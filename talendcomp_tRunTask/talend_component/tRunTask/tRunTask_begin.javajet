<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.designer.codegen.config.CodeGeneratorArgument
		java.util.List
    	java.util.Map
	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode) codeGenArgument.getArgument();
    String cid = node.getUniqueName();
	String mode = ElementParameterParser.getValue(node, "__MODE__");
    boolean useTaskName = "true".equals(ElementParameterParser.getValue(node, "__USE_TASK_NAME__"));
    boolean dieOnError = "true".equals(ElementParameterParser.getValue(node, "__DIE_ON_ERROR__"));
    boolean jobNameIsTaskName = "true".equals(ElementParameterParser.getValue(node, "__JOB_NAME_IS_TASK_NAME__"));
    String taskName = ElementParameterParser.getValue(node, "__TASK_NAME__");
    String jobName = ElementParameterParser.getValue(node, "__PROCESS__");
    if (jobNameIsTaskName) {
    	taskName = "\"" + jobName + "\"";
    }
    String debug = ElementParameterParser.getValue(node, "__DEBUG__");
    String taskId = ElementParameterParser.getValue(node, "__TASK_ID__");
    String tacUrl = ElementParameterParser.getValue(node, "__TAC_URL__");
    String tacUser = ElementParameterParser.getValue(node, "__TAC_USER__");
    String tacPasswd = ElementParameterParser.getValue(node, "__TAC_PASSWD__");
    String asynchron = ElementParameterParser.getValue(node, "__ASYNCHRONOUS_RUN__");
    @SuppressWarnings("unchecked")
    List<Map<String, String>> contextParams = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__CONTEXT_PARAMS__");
    String waitTimeUntilRunning = ElementParameterParser.getValue(node, "__WAIT_UNTIL_RUNNING_CHECK_CYCLE__");
    String timeoutUntilRunning = ElementParameterParser.getValue(node, "__WAIT_UNTIL_RUNNING_TIMEOUT__");
    String waitUntilFinished = ElementParameterParser.getValue(node, "__WAIT_UNTIL_FINISHED_CHECK_CYCLE__");
    boolean checkTaskRunning = "true".equals(ElementParameterParser.getValue(node, "__CHECK_TASK_NOT_RUNNING_SIMULTANEOUSLY__"));
    @SuppressWarnings("unchecked")
    List<Map<String, String>> listTasks = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__TASK_NOT_RUNNING_SIMULTANEOUSLY__");
    boolean waitForTaskEnd = "true".equals(ElementParameterParser.getValue(node, "__WAIT_UNTIL_END__"));
    boolean allowPreparing = "true".equals(ElementParameterParser.getValue(node, "__ALLOW_GENERATING__"));
    String maxRepetitions = ElementParameterParser.getValue(node, "__MAX_REPETITION__");
    String waitTimeBetweenRepetition = ElementParameterParser.getValue(node, "__WAIT_MILLIS_BETWEEN_REPETITION__");
%>
    de.jlo.talendcomp.tac.TACConnection conn_<%=cid%> = new de.jlo.talendcomp.tac.TACConnection(<%=tacUrl%>);
    conn_<%=cid%>.setUser(<%=tacUser%>);
    conn_<%=cid%>.setPassword(<%=tacPasswd%>);
<%  if (maxRepetitions != null && maxRepetitions.trim().isEmpty() == false) { %>
    conn_<%=cid%>.setMaxRepeats(<%=maxRepetitions%>);
<%  } %>
<%  if (waitTimeBetweenRepetition != null && waitTimeBetweenRepetition.trim().isEmpty() == false) { %>
    conn_<%=cid%>.setRepeatWaitTime(<%=waitTimeBetweenRepetition%>);
<%  } %>
    try {
        String taskId_<%=cid%> = null;
<%  if (useTaskName) { %>
        String label_<%=cid%> = <%=taskName.trim()%>;
        {
		    // retrieve the taskId by task name
	        de.jlo.talendcomp.tac.GetTaskIdByName taskIdByName = new de.jlo.talendcomp.tac.GetTaskIdByName(conn_<%=cid%>);
	        taskIdByName.setDebug(<%=debug%>);
	        try {
	    	    taskId_<%=cid%> = taskIdByName.getTaskId(<%=taskName.trim()%>);
			    taskIdByName.info("Task " + <%=taskName.trim()%> + ": has id: " + taskId_<%=cid%>);
	        } catch (Exception e) {
	    	    globalMap.put("<%=cid%>_ERROR_MESSAGE", "Retrieve taskId failed: " + e.getMessage());
	    	    throw e;
	        }
        }
<%  } else { %>
		taskId_<%=cid%> = String.valueOf(<%=taskId%>);
		String label_<%=cid%> = taskId_<%=cid%>;
<%  } %>
		globalMap.put("<%=cid%>_TASK_ID", taskId_<%=cid%>);
<%  if ("status".equals(mode)) { %>
        // check the last status
		{
         de.jlo.talendcomp.tac.GetTaskStatus status = new de.jlo.talendcomp.tac.GetTaskStatus(conn_<%=cid%>);
			status.setDebug(<%=debug%>);
			status.setTaskId(taskId_<%=cid%>);
			try {
			    status.execute();
             globalMap.put("<%=cid%>_STATUS", status.getStatus());
             globalMap.put("<%=cid%>_ERROR_STATUS", status.getErrorStatus());
             globalMap.put("<%=cid%>_HAS_ERRORS", status.hasErrors());
             globalMap.put("<%=cid%>_IS_READY_TO_RUN", status.isReadyToRun());
             globalMap.put("<%=cid%>_IS_PREPARING", status.isPreparing());
             globalMap.put("<%=cid%>_IS_RUNNING", status.isRunning());
			} catch (Exception e) {
			    String message = "Get task status for task:" + label_<%=cid%> + " failed:" + e.getMessage();
				 globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
			    throw e;
			}
		}
<%  } else if ("run".equals(mode)) { %>
      // run a task
      int restartTaskCounter = 0;
		startRun: while (true) { // startRun block begin
         // check if the task is ready to run
		   {
         de.jlo.talendcomp.tac.GetTaskStatus status = new de.jlo.talendcomp.tac.GetTaskStatus(conn_<%=cid%>);
			status.setDebug(<%=debug%>);
			status.setTaskId(taskId_<%=cid%>);
			status.execute();
			if (status.isReadyToRun() == false && status.isRunning() == false) {
             // task has any other state than READY_TO_RUN and RUNNING or REQUESTING_TO_RUN
             // this could mean it is not deployed or is generating or need a generate
				 String message = "Task " + label_<%=cid%> + " is not not ready to run. Status:" + status.getStatus() + " ErrorStatus:" + status.getErrorStatus();
<%      if (allowPreparing) { %>
				 if (status.isPreparing() && status.isInReadyState() == false) {
                 // task is preparing
                 status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " is preparing.");
					  while (status.isPreparing() && status.isInReadyState() == false) {
                     Thread.sleep(10000); // wait 10s
                     status.execute(); // check again
					  }
					  if (status.isPreparing()) {
                     status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " has finished a preparing step.");
					  } else {
						   status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " has finished preparing.");
					  }
				 }
<%      } else { %>
				 // the task is not ready to run
				 globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		    	 // we have to die here
             throw new Exception(message);
<%      } %>
         }
         globalMap.put("<%=cid%>_STATUS", status.getStatus());
         globalMap.put("<%=cid%>_ERROR_STATUS", status.getErrorStatus());
         globalMap.put("<%=cid%>_HAS_ERRORS", status.hasErrors());
         globalMap.put("<%=cid%>_IS_READY_TO_RUN", status.isReadyToRun());
         globalMap.put("<%=cid%>_IS_PREPARING", status.isPreparing());
         globalMap.put("<%=cid%>_IS_RUNNING", status.isRunning());
      }
<%	    if (checkTaskRunning || waitForTaskEnd == false) { %>
		{
         // wait until tasks are finished (or simply not running)
         java.util.List<String> listTasks = new java.util.ArrayList<String>();
         de.jlo.talendcomp.tac.GetTaskIdByName taskIdByName = new de.jlo.talendcomp.tac.GetTaskIdByName(conn_<%=cid%>);
         taskIdByName.setDebug(<%=debug%>);
			de.jlo.talendcomp.tac.GetTaskStatus status = new de.jlo.talendcomp.tac.GetTaskStatus(conn_<%=cid%>);
			status.setDebug(<%=debug%>);
            try {
				boolean wait = true;
				boolean firstLoop = true;
				while (wait) {
					wait = false;
					// Check if this task is not currently running
					status.setTaskId(taskId_<%=cid%>);
					status.execute();
					if (status.isRunning()) {
						if (firstLoop) {
							firstLoop = false;
							status.info("Task " + label_<%=cid%> + ": Own task is currently started or running. Wait for its end.");
						}
						wait = true;
						Thread.sleep(1000);
						continue; // no need to check another task if our task is not ready
					}
					Thread.sleep(100); // wait a bit to avoid over running the TAC
					// wait for possible more tasks
<%       for (Map<String, String> taskMap : listTasks) { 
		     String taskToWait = taskMap.get("TASK_NAME"); 
		     if (taskToWait != null && taskToWait.trim().isEmpty() == false) {
		  	     taskToWait = taskToWait.replace('\"',' ').trim(); %>
					status.setTaskId(taskIdByName.getTaskId("<%=taskToWait%>"));
					status.execute();
					if (status.isRunning()) {
						wait = true;
						Thread.sleep(1000);
						continue; // one of the necessary task is currently running, no need to check another task 
					}
                    Thread.sleep(100); // wait a bit to avoid over running the TAC
<%           } %>			
<%      } %>			
			    } // end while
			    status.info("Task " + label_<%=cid%> + ": All precondition tasks has been finished.");
			} catch (Exception e) {
				globalMap.put("<%=cid%>_ERROR_MESSAGE", "Wait for task failed: " + e.getMessage());
				throw e;
			}
		}
<%      } %>
		de.jlo.talendcomp.tac.RunTask runTask_<%=cid%> = new de.jlo.talendcomp.tac.RunTask(conn_<%=cid%>);
		runTask_<%=cid%>.setDebug(<%=debug%>);
		runTask_<%=cid%>.setTaskId(taskId_<%=cid%>);
<%      for (Map<String, String> contextParam : contextParams) {
		    String paramName = contextParam.get("NAME");
		    String paramValue = contextParam.get("VALUE");
		    if (paramName != null && paramName.trim().isEmpty() == false && paramValue != null && paramValue.trim().isEmpty() == false) { %>
		runTask_<%=cid%>.addContextParam("<%=paramName.trim()%>", <%=paramValue.trim()%>);
<%          } %>
<%      } %>
		runTask_<%=cid%>.setSynchronous(!<%=asynchron%>);
		long startTime = System.currentTimeMillis();
		long stopTime = 0;
		try {
			runTask_<%=cid%>.info(runTask_<%=cid%>.getTimeAsString() + "# Task " + label_<%=cid%> + " starting ...");
			runTask_<%=cid%>.execute(); // start the task
		} catch (Exception e) {
		   if (runTask_<%=cid%>.needRestartWithCheckTaskStatus()) {
		      runTask_<%=cid%>.info("Task " + label_<%=cid%> + ": Task is still processing (not correclty recognised by the former status check) -> restart the check and run cycle.");
		   	continue startRun; // with startRun loop
		   }
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
<%      if ("true".equals(asynchron)) { %>
		if (runTask_<%=cid%>.useRequestHandling() == false) {
			// terrible request handling prior Talend release 5.6
			// waiting until task has been started
			int waitTimeUntilRunning = <%=waitTimeUntilRunning%>;
			de.jlo.talendcomp.tac.GetTaskStatus status = new de.jlo.talendcomp.tac.GetTaskStatus(conn_<%=cid%>);
			status.setDebug(<%=debug%>);
			status.setTaskId(runTask_<%=cid%>.getTaskId());
			try {
				status.execute();
				if (status.isRunning() == false || status.isPreparing()) {
					long timeout = <%=timeoutUntilRunning%>;
					status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " wait until running ...");
					boolean preparingMessagePrinted = false;
					while (status.isRunning() == false || status.isPreparing()) {
						if (status.isPreparing() == false) {
							if (preparingMessagePrinted) {
								status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " has finished preparing.");
							}
							long timeAfterStart = System.currentTimeMillis() - startTime;
							if (timeAfterStart > timeout) {
								status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " timeout to wait for running reached.");
	                            break;
							}
						} else if (preparingMessagePrinted == false) {
							preparingMessagePrinted = true;
							status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " is preparing.");
						}
						Thread.sleep(waitTimeUntilRunning);
						status.execute();
					} // while
					status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " is running.");
				} else {
					status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " is already running.");
				}			
	         globalMap.put("<%=cid%>_STATUS", status.getStatus());
    	      globalMap.put("<%=cid%>_ERROR_STATUS", status.getErrorStatus());
        	   globalMap.put("<%=cid%>_HAS_ERRORS", status.hasErrors());
            globalMap.put("<%=cid%>_IS_READY_TO_RUN", status.isReadyToRun());
            globalMap.put("<%=cid%>_IS_PREPARING", status.isPreparing());
            globalMap.put("<%=cid%>_IS_RUNNING", status.isRunning());
			} catch (Exception e) {
				globalMap.put("<%=cid%>_ERROR_MESSAGE", "Get running task status failed: " + e.getMessage());
				status.error(status.getJson(), null);
			   throw e;
			} 
<%          if (waitForTaskEnd) { %>		
			// waiting until task has been finished
			int waitUntilFinished = <%=waitUntilFinished%>;
			try {
				status.execute();
	            globalMap.put("<%=cid%>_STATUS", status.getStatus());
    	        globalMap.put("<%=cid%>_ERROR_STATUS", status.getErrorStatus());
        	    globalMap.put("<%=cid%>_HAS_ERRORS", status.hasErrors());
            	globalMap.put("<%=cid%>_IS_READY_TO_RUN", status.isReadyToRun());
            	globalMap.put("<%=cid%>_IS_PREPARING", status.isPreparing());
            	globalMap.put("<%=cid%>_IS_RUNNING", status.isRunning());
				if (status.isRunning()) {
					status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " wait until finished ...");
					while (status.isRunning() || (status.isPreparing() && status.isInReadyState() == false)) {
						Thread.sleep(waitUntilFinished);
						status.execute();
					}
				} else {
					status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + " is already finished.");
				}
			} catch (Exception e) {
			    globalMap.put("<%=cid%>_ERROR_MESSAGE", "Get finish task status failed: " + e.getMessage());
				throw e;
			}
			status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + ": status:" + status.getStatus());
			status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + ": errorStatus:" + status.getErrorStatus());
			Integer returnCode = status.getReturnCode();
			globalMap.put("<%=cid%>_RETURN_CODE", returnCode); 
			status.info(status.getTimeAsString() + "# Task " + label_<%=cid%> + ": returnCode:" + returnCode);
<%  	        if (dieOnError) { %>
			if (returnCode != null && returnCode.intValue() != 0) {
				errorCode = returnCode;
				globalMap.put("<%=cid%>_ERROR_MESSAGE", "Task " + label_<%=cid%> + ": Execute task failed. ErrorCode:" + errorCode);
				throw new Exception("Child job running failed. ErrorCode:" + errorCode);
			}
<%  	        } %>
<%          } // wait for task end %>
		} else {
			// simplyfied reliable request handling since Talend release 5.6
			int waitUntilFinished = <%=waitUntilFinished%>;
			de.jlo.talendcomp.tac.GetTaskExecutionStatus tes = new de.jlo.talendcomp.tac.GetTaskExecutionStatus(conn_<%=cid%>);
			tes.setDebug(<%=debug%>);
			tes.setExecRequestId(runTask_<%=cid%>.getExecRequestId());
			tes.execute();
			while (tes.isRunning()) {
			    if (tes.isPreparing()) {
			   	    System.out.println("Task is " + tes.getExecDetailedStatus());
			    }
				Thread.sleep(waitUntilFinished);
				tes.execute();
			}
			tes.info(tes.getTimeAsString() + "# Task " + label_<%=cid%> + ": status:" + tes.getExecBasicStatus());
			tes.info(tes.getTimeAsString() + "# Task " + label_<%=cid%> + ": detailedStatus:" + tes.getExecDetailedStatus());
			Integer returnCode = tes.getJobExitCode();
			tes.info(tes.getTimeAsString() + "# Task " + label_<%=cid%> + ": returnCode:" + returnCode);
			globalMap.put("<%=cid%>_RETURN_CODE", returnCode);
	        // check the last status again
			{
	            de.jlo.talendcomp.tac.GetTaskStatus status = new de.jlo.talendcomp.tac.GetTaskStatus(conn_<%=cid%>);
				status.setDebug(<%=debug%>);
				status.setTaskId(taskId_<%=cid%>);
				try {
				    status.execute();
	                globalMap.put("<%=cid%>_STATUS", status.getStatus());
	                globalMap.put("<%=cid%>_ERROR_STATUS", status.getErrorStatus());
	                globalMap.put("<%=cid%>_HAS_ERRORS", status.hasErrors());
	                globalMap.put("<%=cid%>_IS_READY_TO_RUN", status.isReadyToRun());
	                globalMap.put("<%=cid%>_IS_PREPARING", status.isPreparing());
	                globalMap.put("<%=cid%>_IS_RUNNING", status.isRunning());
				} catch (Exception e) {
				    String message = "Get task status for task:" + label_<%=cid%> + " failed:" + e.getMessage();
					globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
				    throw e;
				}
			}
<%  	    if (dieOnError) { %>
			if (returnCode != null && returnCode.intValue() != 0) {
				errorCode = returnCode;
				globalMap.put("<%=cid%>_ERROR_MESSAGE", "Task " + label_<%=cid%> + ": Execute task failed. ErrorCode:" + errorCode);
				throw new Exception("Child job running failed. ErrorCode:" + errorCode);
			}
<%  	    } %>
		}
<%      } else { // run synchron %>
		stopTime = System.currentTimeMillis();
		runTask_<%=cid%>.info("Task " + label_<%=cid%> + ": status:" + runTask_<%=cid%>.getStatus());
		runTask_<%=cid%>.info("Task " + label_<%=cid%> + ": errorStatus:" + runTask_<%=cid%>.getErrorStatus());
		Integer <%=cid%>_returnCode = runTask_<%=cid%>.getReturnCode();
		globalMap.put("<%=cid%>_RETURN_CODE", <%=cid%>_returnCode); 
		runTask_<%=cid%>.info("Task " + label_<%=cid%> + ": returnCode:" + <%=cid%>_returnCode);
<%  	    if (dieOnError) { %>
		if (<%=cid%>_returnCode != null && <%=cid%>_returnCode.intValue() != 0) {
			errorCode = <%=cid%>_returnCode;
		    globalMap.put("<%=cid%>_ERROR_MESSAGE", "Task " + label_<%=cid%> + ": Execute task failed. ErrorCode:" + errorCode);
			throw new Exception("Child job running failed. ErrorCode:" + errorCode);
	    }
<%  	    } %>
<%      } %>
		runTask_<%=cid%>.info("Task " + label_<%=cid%> + ": ready.");
		if (stopTime > 0) { // set duration only if we have wait until the end
		    globalMap.put("<%=cid%>_RUN_DURATION", (stopTime - startTime));	
		}
		break;
	  } // startRun block end
<%  } else { // mode unknown %>
	// unkown mode detected
	if (true) throw new IllegalStateException("Operational mode: <%=mode%> is unknown!");
<%  } %>
    } finally {
		conn_<%=cid%>.close();
	}